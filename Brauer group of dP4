//========================
//Some preliminary objects
//========================
R<T>:=PolynomialRing(Rationals());
U<u0,u1,u2,u3,u4> := PolynomialRing(Rationals(),5);

Q3 := u0^2 + 3*u1^2 + 3*u2^2 - u3^2 + u4^2;
Q4 := 2*u0^2 + 51*u1^2 + u2^2 - 35*u3^2 + u0*u4;

//===============================================
//Change Q3 and Q4 so that f is quintic and monic
//===============================================

//Change Q3 to have nonzero determinant
change := [t: t in [0,1,-1,2,-2,3]| Determinant(SymmetricMatrix(Q3+t*Q4)) ne 0][1];
Q32 := Q3+change*Q4;
change2 := Determinant(SymmetricMatrix(Q32));

//Change to Q3 having determinant 1
Q33 := 1/change2*Evaluate(Q32,[u0*change2^2,u1,u2,u3,u4]);
Q43 := 1/change2*Evaluate(Q4,[u0*change2^2,u1,u2,u3,u4]);

Q3:=Q43;
Q4:=Q33;

M3:=SymmetricMatrix(Q3);
M4:=SymmetricMatrix(Q4);

f := Determinant(M3+T*M4);

print "f: ", Factorisation(f);
print "LC(f): ", LeadingCoefficient(f);

D:=Numerator(Discriminant(f));
print "Delta:", Factorisation(D);

f2:=Factorisation(f)[1][1];
f3:=Factorisation(f)[2][1];

L2<sqy> := quo<R | f2>;
L3<the> := quo<R | f3>;

M:=M3+sqy*M4;
vs := Matrix(Basis(Image(M)));
epsilon2:=Determinant(vs*M*Transpose(vs));
print "epsilon2: ", epsilon2;
print "Norm(epsilon2):", Norm(epsilon2);
print "Is Norm(epsilon2) square?", IsSquare(Norm(epsilon2));
print "Is epsilon2 square?", IsSquare(epsilon2);

M:=M3+the*M4;
vs := Matrix(Basis(Image(M)));
epsilon3:=Determinant(vs*M*Transpose(vs));
print "epsilon3: ", epsilon3;
print "Norm(epsilon3):", Norm(epsilon3);
print "Is epsilon3 square?", IsSquare(epsilon3);

IsSquare(epsilon2/(3*(1-4*sqy)));
IsSquare(epsilon3/(1-4*the));
epsilon2:=3*(1-4*sqy);
epsilon3:=1-4*the;

Norm(epsilon2);
Norm(epsilon3);

valy:=function(c)
    return Degree(TrailingTerm(Numerator(c), 2),2)-Degree(TrailingTerm(Denominator(c), 2),2);
end function;

valx:=function(c)
    return Degree(TrailingTerm(Numerator(c), 3),3)-Degree(TrailingTerm(Denominator(c), 3),3);
end function;

M33:=Submatrix(M3,3,3,3,3);
M44:=Submatrix(M4,3,3,3,3);

Pencil:=B*M33+M44;

MP,J:=Diagonalization(Pencil);

MP;

MRUS:=function(c);
return Numerator(c)*Denominator(c);
end function;


M33:=[B^(-1)*MP[i][i]-Evaluate(MP[i][i],3,0):i in [1..3]];
M44:=[Evaluate(MP[i][i],3,0): i in [1..3]];

PCOS:=[<M33[i],M44[i]>: i in [1..3]];

//for pair in PCOS do
//    print valy(pair[1]), valy(pair[2]), valx(Evaluate(pair[1]*y^(-valy(pair[1])),2,0)), valx(Evaluate(pair[2]*y^(-valy(pair[2])),2,0));
//end for;

VALM:=Matrix(Integers(),3,3,[valy(PCOS[1][1]),valx(Evaluate(PCOS[1][1]*y^(-valy(PCOS[1][2])),2,0)),1,valy(PCOS[2][1]),valx(Evaluate(PCOS[2][1]*y^(-valy(PCOS[2][1])),2,0)),1,valy(PCOS[3][1]),valx(Evaluate(PCOS[3][1]*y^(-valy(PCOS[3][1])),2,0)),1]);

//Determinant(VALM) mod 2;
if Determinant(VALM) mod 2 eq 1 mod 2 then
              print "LETSFUCKINGGOOOOOOOOOOOOOOOOOO" ;
end if;

Rank2:=Submatrix(M3*B+M4, 1, 1, 2, 2);



Det:=Determinant(Rank2);
Det:=MRUS(Det);

valy(Det) mod 2 eq 0 mod 2;
valx(Evaluate(Det*y^(-valy(Det)),2,0)) mod 2 eq 0 mod 2;

Factorisation(Det);

